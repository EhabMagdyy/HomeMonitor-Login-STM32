
HomeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c4  080038c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  080038dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080038dc  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aac3  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e27  00000000  00000000  0002ab46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ef  00000000  00000000  0002d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a06  00000000  00000000  0002dbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5fb  00000000  00000000  000445cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092f8d  00000000  00000000  00050bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b6c  00000000  00000000  000e3b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e66c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037ac 	.word	0x080037ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080037ac 	.word	0x080037ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <Set_Pin_Input>:

uint8_t RH1, RH2, T1, T2, Sum, CheckSum;   /* Variables to store DHT22 data */

/*   Setting DHT22 Pin Input to receive data    */
static void Set_Pin_Input(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <Set_Pin_Input+0x30>)
 8000cd2:	f001 fe15 	bl	8002900 <HAL_GPIO_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <Set_Pin_Output>:

/*   Setting DHT22 Pin Output to send data    */
static void Set_Pin_Output(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT22_PIN;
 8000cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cfc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStruct);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <Set_Pin_Output+0x38>)
 8000d10:	f001 fdf6 	bl	8002900 <HAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020000 	.word	0x40020000

08000d20 <Delay_US>:

/*   Provides delay in MicroSeconds   */
static void Delay_US(uint16_t delay)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <Delay_US+0x30>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim10) < delay);
 8000d32:	bf00      	nop
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <Delay_US+0x30>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3f9      	bcc.n	8000d34 <Delay_US+0x14>
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000007c 	.word	0x2000007c

08000d54 <DHT22_Start>:

/*   Start Communication with DHT22   */
void DHT22_Start(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    Set_Pin_Output();
 8000d58:	f7ff ffc4 	bl	8000ce4 <Set_Pin_Output>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <DHT22_Start+0x6c>)
 8000d64:	f001 ff68 	bl	8002c38 <HAL_GPIO_WritePin>
    Delay_US(1300);     // wait for > 1ms
 8000d68:	f240 5014 	movw	r0, #1300	; 0x514
 8000d6c:	f7ff ffd8 	bl	8000d20 <Delay_US>
    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <DHT22_Start+0x6c>)
 8000d78:	f001 ff5e 	bl	8002c38 <HAL_GPIO_WritePin>
    Delay_US(30);       // wait for 20-40us
 8000d7c:	201e      	movs	r0, #30
 8000d7e:	f7ff ffcf 	bl	8000d20 <Delay_US>
    Set_Pin_Input();
 8000d82:	f7ff ff95 	bl	8000cb0 <Set_Pin_Input>

    while(!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));    // wait for the pin to go high
 8000d86:	bf00      	nop
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <DHT22_Start+0x6c>)
 8000d8e:	f001 ff3b 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f7      	beq.n	8000d88 <DHT22_Start+0x34>
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <DHT22_Start+0x70>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
    while((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && 100 > __HAL_TIM_GET_COUNTER(&htim10));    // wait for the pin to go low
 8000da0:	bf00      	nop
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <DHT22_Start+0x6c>)
 8000da8:	f001 ff2e 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <DHT22_Start+0x68>
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <DHT22_Start+0x70>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b63      	cmp	r3, #99	; 0x63
 8000dba:	d9f2      	bls.n	8000da2 <DHT22_Start+0x4e>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	2000007c 	.word	0x2000007c

08000dc8 <DHT22_Read>:

/*   Reading 8 bits of data from DHT22   */
uint8_t DHT22_Read(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
    uint8_t i, x = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71bb      	strb	r3, [r7, #6]

    for (i = 0 ; i < 8 ; i++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e043      	b.n	8000e60 <DHT22_Read+0x98>
    {
        while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go high
 8000dd8:	bf00      	nop
 8000dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dde:	4824      	ldr	r0, [pc, #144]	; (8000e70 <DHT22_Read+0xa8>)
 8000de0:	f001 ff12 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f7      	beq.n	8000dda <DHT22_Read+0x12>
        Delay_US (40);   // wait for 40 us
 8000dea:	2028      	movs	r0, #40	; 0x28
 8000dec:	f7ff ff98 	bl	8000d20 <Delay_US>

        if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))    // if the pin is low - bit = 0
 8000df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <DHT22_Read+0xa8>)
 8000df6:	f001 ff07 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10e      	bne.n	8000e1e <DHT22_Read+0x56>
            x &= ~(1 << (7 - i));
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2201      	movs	r2, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e16:	4013      	ands	r3, r2
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	71bb      	strb	r3, [r7, #6]
 8000e1c:	e00b      	b.n	8000e36 <DHT22_Read+0x6e>
        else											    // if the pin is low - bit = 1
            x |= (1 << (7 - i));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f1c3 0307 	rsb	r3, r3, #7
 8000e24:	2201      	movs	r2, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	71bb      	strb	r3, [r7, #6]

        __HAL_TIM_SET_COUNTER(&htim10, 0);
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <DHT22_Read+0xac>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
        while((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && 100 > __HAL_TIM_GET_COUNTER(&htim10));    // wait for the pin to go low
 8000e3e:	bf00      	nop
 8000e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <DHT22_Read+0xa8>)
 8000e46:	f001 fedf 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <DHT22_Read+0x92>
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <DHT22_Read+0xac>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	2b63      	cmp	r3, #99	; 0x63
 8000e58:	d9f2      	bls.n	8000e40 <DHT22_Read+0x78>
    for (i = 0 ; i < 8 ; i++)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	d9b8      	bls.n	8000dd8 <DHT22_Read+0x10>
    }
    return x;
 8000e66:	79bb      	ldrb	r3, [r7, #6]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000
 8000e74:	2000007c 	.word	0x2000007c

08000e78 <DHT22_Get_Reading>:

/*   Set the values of Temperature & Humidity if CheckSum is Correct   */
uint8_t DHT22_Get_Reading(float* temp, float* humidity)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	uint8_t isReadingCorrect = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

	DHT22_Start();
 8000e86:	f7ff ff65 	bl	8000d54 <DHT22_Start>

    RH1 = DHT22_Read();            // Most Significant 8bits of Humidity
 8000e8a:	f7ff ff9d 	bl	8000dc8 <DHT22_Read>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <DHT22_Get_Reading+0xfc>)
 8000e94:	701a      	strb	r2, [r3, #0]
    RH2 = DHT22_Read();            // Least Significant 8bits of Humidity
 8000e96:	f7ff ff97 	bl	8000dc8 <DHT22_Read>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <DHT22_Get_Reading+0x100>)
 8000ea0:	701a      	strb	r2, [r3, #0]
    T1 = DHT22_Read();             // Most Significant 8bits of Temperature
 8000ea2:	f7ff ff91 	bl	8000dc8 <DHT22_Read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <DHT22_Get_Reading+0x104>)
 8000eac:	701a      	strb	r2, [r3, #0]
    T2 = DHT22_Read();             // Least Significant 8bits of Temperature
 8000eae:	f7ff ff8b 	bl	8000dc8 <DHT22_Read>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <DHT22_Get_Reading+0x108>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    CheckSum = DHT22_Read();       // Check Sum on last 8*4 bits
 8000eba:	f7ff ff85 	bl	8000dc8 <DHT22_Read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <DHT22_Get_Reading+0x10c>)
 8000ec4:	701a      	strb	r2, [r3, #0]
    Sum = RH1 + RH2 + T1 + T2;     // Actual Sum of RH1,RH2,T1,T2
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <DHT22_Get_Reading+0xfc>)
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <DHT22_Get_Reading+0x100>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <DHT22_Get_Reading+0x104>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <DHT22_Get_Reading+0x108>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <DHT22_Get_Reading+0x110>)
 8000ee4:	701a      	strb	r2, [r3, #0]

    if(CheckSum == Sum)
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <DHT22_Get_Reading+0x10c>)
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <DHT22_Get_Reading+0x110>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d13b      	bne.n	8000f6a <DHT22_Get_Reading+0xf2>
    {
    	isReadingCorrect = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]

        if((T1 >> 7) & 1)          // if Temperature Negative
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <DHT22_Get_Reading+0x104>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	09db      	lsrs	r3, r3, #7
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00f      	beq.n	8000f26 <DHT22_Get_Reading+0xae>
        {
        	*temp = (float) T2 / 10 * (-1);
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <DHT22_Get_Reading+0x108>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f12:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1a:	eef1 7a67 	vneg.f32	s15, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edc3 7a00 	vstr	s15, [r3]
 8000f24:	e010      	b.n	8000f48 <DHT22_Get_Reading+0xd0>
        }
        else
        {
        	*temp = (float)((T1 << 8) | T2) / 10;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <DHT22_Get_Reading+0x104>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <DHT22_Get_Reading+0x108>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a00 	vstr	s15, [r3]
        }

        *humidity = (float)((RH1 << 8) | RH2) / 10;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <DHT22_Get_Reading+0xfc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <DHT22_Get_Reading+0x100>)
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	edc3 7a00 	vstr	s15, [r3]
    }

    return isReadingCorrect;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000002c 	.word	0x2000002c
 8000f78:	2000002d 	.word	0x2000002d
 8000f7c:	2000002e 	.word	0x2000002e
 8000f80:	2000002f 	.word	0x2000002f
 8000f84:	20000031 	.word	0x20000031
 8000f88:	20000030 	.word	0x20000030

08000f8c <keypad_Read_Value>:
																	{'*','0','#'}
};

/******************************      Software interfaces    ******************************/
uint8_t keypad_Read_Value(const keypad_t *keypad)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	uint8_t keypad_value = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

	if(NULL != keypad)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d062      	beq.n	8001064 <keypad_Read_Value+0xd8>
	{
		uint8_t pin_state = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	733b      	strb	r3, [r7, #12]

		for(uint8_t rows = 0 ; (rows < KEYPAD_ROWS) && (0 == keypad_value) ; rows++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]
 8000fa6:	e057      	b.n	8001058 <keypad_Read_Value+0xcc>
		{
			HAL_GPIO_WritePin(keypad->keypadRows_Port[rows], keypad->keypadRows_Pin[rows], GPIO_PIN_SET);
 8000fa8:	7bba      	ldrb	r2, [r7, #14]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fb0:	7bba      	ldrb	r2, [r7, #14]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f001 fe3b 	bl	8002c38 <HAL_GPIO_WritePin>
			for(uint8_t col = 0 ; (col < KEYPAD_COLOUMNS) && (0 == keypad_value) ; col++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	737b      	strb	r3, [r7, #13]
 8000fc6:	e031      	b.n	800102c <keypad_Read_Value+0xa0>
			{
				pin_state = HAL_GPIO_ReadPin(keypad->keypadCols_Port[col], keypad->keypadCols_Pin[col]);
 8000fc8:	7b7a      	ldrb	r2, [r7, #13]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3206      	adds	r2, #6
 8000fce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	3310      	adds	r3, #16
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f001 fe12 	bl	8002c08 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	733b      	strb	r3, [r7, #12]

				if(GPIO_PIN_SET == pin_state)
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d11b      	bne.n	8001026 <keypad_Read_Value+0x9a>
				{
					keypad_value = keypad_matrix[rows][col];
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	7b79      	ldrb	r1, [r7, #13]
 8000ff2:	481f      	ldr	r0, [pc, #124]	; (8001070 <keypad_Read_Value+0xe4>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	73fb      	strb	r3, [r7, #15]
					while(GPIO_PIN_SET == HAL_GPIO_ReadPin(keypad->keypadCols_Port[col], keypad->keypadCols_Port[col]));
 8001002:	bf00      	nop
 8001004:	7b7a      	ldrb	r2, [r7, #13]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3206      	adds	r2, #6
 800100a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800100e:	7b7a      	ldrb	r2, [r7, #13]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3206      	adds	r2, #6
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	f001 fdf4 	bl	8002c08 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d0ee      	beq.n	8001004 <keypad_Read_Value+0x78>
			for(uint8_t col = 0 ; (col < KEYPAD_COLOUMNS) && (0 == keypad_value) ; col++)
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	3301      	adds	r3, #1
 800102a:	737b      	strb	r3, [r7, #13]
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d802      	bhi.n	8001038 <keypad_Read_Value+0xac>
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0c7      	beq.n	8000fc8 <keypad_Read_Value+0x3c>
				}
				else { /* Do Nothing */ }
			}

			HAL_GPIO_WritePin(keypad->keypadRows_Port[rows], keypad->keypadRows_Pin[rows], GPIO_PIN_RESET);
 8001038:	7bba      	ldrb	r2, [r7, #14]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001040:	7bba      	ldrb	r2, [r7, #14]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f001 fdf3 	bl	8002c38 <HAL_GPIO_WritePin>
		for(uint8_t rows = 0 ; (rows < KEYPAD_ROWS) && (0 == keypad_value) ; rows++)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	3301      	adds	r3, #1
 8001056:	73bb      	strb	r3, [r7, #14]
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d802      	bhi.n	8001064 <keypad_Read_Value+0xd8>
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0a1      	beq.n	8000fa8 <keypad_Read_Value+0x1c>
		}
	}
	else { /* Do Nothing */ }

	return keypad_value;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08003890 	.word	0x08003890

08001074 <Delay_US>:

extern TIM_HandleTypeDef htim10;  // Enable a timer, adjust its Frequency to (1MHz) to get a tick each 1us.

/* Generate a MicroSecond delay */
static void Delay_US(uint16_t delay)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <Delay_US+0x30>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim10) < delay);
 8001086:	bf00      	nop
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <Delay_US+0x30>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3f9      	bcc.n	8001088 <Delay_US+0x14>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000007c 	.word	0x2000007c

080010a8 <lCD_Init>:
		.Data_Pins[2] = GPIO_PIN_4,
		.Data_Pins[3] = GPIO_PIN_5,
};

void lCD_Init(const lcd_t *lcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(NULL != lcd)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d02c      	beq.n	8001110 <lCD_Init+0x68>
	{
		HAL_Delay(40);
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f000 fe90 	bl	8001ddc <HAL_Delay>
		LCD_Send_Command(lcd, 0x3);
 80010bc:	2103      	movs	r1, #3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f82a 	bl	8001118 <LCD_Send_Command>
		HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fe89 	bl	8001ddc <HAL_Delay>
		LCD_Send_Command(lcd, 0x2);
 80010ca:	2102      	movs	r1, #2
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f823 	bl	8001118 <LCD_Send_Command>
		HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fe82 	bl	8001ddc <HAL_Delay>
		LCD_Send_Command(lcd, 0x2);  //4 bit mode
 80010d8:	2102      	movs	r1, #2
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f81c 	bl	8001118 <LCD_Send_Command>
		HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fe7b 	bl	8001ddc <HAL_Delay>

        LCD_Send_Command(lcd, LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 80010e6:	210c      	movs	r1, #12
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f815 	bl	8001118 <LCD_Send_Command>
        HAL_Delay(3);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 fe74 	bl	8001ddc <HAL_Delay>
    	LCD_Send_Command(lcd, LCD_CLEAR);
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f80e 	bl	8001118 <LCD_Send_Command>
    	HAL_Delay(3);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fe6d 	bl	8001ddc <HAL_Delay>
    	LCD_Send_Command(lcd, LCD_4BIT_MODE_2LINES);
 8001102:	2128      	movs	r1, #40	; 0x28
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f807 	bl	8001118 <LCD_Send_Command>
    	HAL_Delay(3);
 800110a:	2003      	movs	r0, #3
 800110c:	f000 fe66 	bl	8001ddc <HAL_Delay>
	}
	else{ /* Do Nothing */ }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <LCD_Send_Command>:

void LCD_Send_Command(const lcd_t *lcd, uint8_t command)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
	if(NULL != lcd)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <LCD_Send_Command+0x46>
	{
        HAL_GPIO_WritePin(lcd->Lcd_Port, lcd->RS_Pin, GPIO_PIN_RESET);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	f001 fd7f 	bl	8002c38 <HAL_GPIO_WritePin>
        LCD_Send_4bit(lcd, command >> 4);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f891 	bl	800126a <LCD_Send_4bit>
        LCD_Send_Enable_Signal(lcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8b6 	bl	80012ba <LCD_Send_Enable_Signal>
        LCD_Send_4bit(lcd, command);
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	4619      	mov	r1, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f889 	bl	800126a <LCD_Send_4bit>
        LCD_Send_Enable_Signal(lcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f8ae 	bl	80012ba <LCD_Send_Enable_Signal>
	}
	else{ /* Do Nothing */ }
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <LCD_Send_Char>:

void LCD_Send_Char(const lcd_t *lcd, uint8_t data)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
	if(NULL != lcd)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01c      	beq.n	80011b2 <LCD_Send_Char+0x4c>
	{
		HAL_GPIO_WritePin(lcd->Lcd_Port, lcd->RS_Pin, GPIO_PIN_SET);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	f001 fd58 	bl	8002c38 <HAL_GPIO_WritePin>
        LCD_Send_4bit(lcd, data >> 4);
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f86a 	bl	800126a <LCD_Send_4bit>
        LCD_Send_Enable_Signal(lcd);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f88f 	bl	80012ba <LCD_Send_Enable_Signal>
        LCD_Send_4bit(lcd, data);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f862 	bl	800126a <LCD_Send_4bit>
        LCD_Send_Enable_Signal(lcd);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f887 	bl	80012ba <LCD_Send_Enable_Signal>
        Delay_US(50);
 80011ac:	2032      	movs	r0, #50	; 0x32
 80011ae:	f7ff ff61 	bl	8001074 <Delay_US>
	}
	else{ /* Do Nothing */ }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <LCD_Send_Char_Pos>:

void LCD_Send_Char_Pos(const lcd_t *lcd, uint8_t row, uint8_t colomn, uint8_t data)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	4608      	mov	r0, r1
 80011c4:	4611      	mov	r1, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70bb      	strb	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
	if(NULL != lcd)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <LCD_Send_Char_Pos+0x36>
	{
		LCD_Set_Cursor(lcd, row, colomn);
 80011da:	78ba      	ldrb	r2, [r7, #2]
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	4619      	mov	r1, r3
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f888 	bl	80012f6 <LCD_Set_Cursor>
		LCD_Send_Char(lcd, data);
 80011e6:	787b      	ldrb	r3, [r7, #1]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffbb 	bl	8001166 <LCD_Send_Char>
	}
	else{ /* Do Nothing */ }
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LCD_Send_String>:

void LCD_Send_String(const lcd_t *lcd, uint8_t *string)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	if(NULL != lcd && NULL != string)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00f      	beq.n	8001228 <LCD_Send_String+0x30>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00c      	beq.n	8001228 <LCD_Send_String+0x30>
	{
        do{
        	LCD_Send_Char(lcd, *string);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffa6 	bl	8001166 <LCD_Send_Char>
        } while(*(++string));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f2      	bne.n	800120e <LCD_Send_String+0x16>
	}
	else{ /* Do Nothing */ }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LCD_Send_String_Pos>:

void LCD_Send_String_Pos(const lcd_t *lcd, uint8_t row, uint8_t colomn, uint8_t *string)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	72fb      	strb	r3, [r7, #11]
 800123e:	4613      	mov	r3, r2
 8001240:	72bb      	strb	r3, [r7, #10]
	if(NULL != lcd && NULL != string)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <LCD_Send_String_Pos+0x32>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <LCD_Send_String_Pos+0x32>
	{
		LCD_Set_Cursor(lcd, row, colomn);
 800124e:	7aba      	ldrb	r2, [r7, #10]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	4619      	mov	r1, r3
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f84e 	bl	80012f6 <LCD_Set_Cursor>
		LCD_Send_String(lcd, string);
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ffcb 	bl	80011f8 <LCD_Send_String>
	}
	else{ /* Do Nothing */ }
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LCD_Send_4bit>:
	}
	else{ /* Do Nothing */ }
}

static void LCD_Send_4bit(const lcd_t *lcd, uint8_t data)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
    if(NULL != lcd)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01a      	beq.n	80012b2 <LCD_Send_4bit+0x48>
    {
        for(uint8_t line_pins = 0 ; line_pins < 4 ; line_pins++)
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e014      	b.n	80012ac <LCD_Send_4bit+0x42>
        {
        	HAL_GPIO_WritePin(lcd->Lcd_Port, lcd->Data_Pins[line_pins], (data >> line_pins) & 0x01);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3204      	adds	r2, #4
 800128c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	fa42 f303 	asr.w	r3, r2, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	f001 fcc9 	bl	8002c38 <HAL_GPIO_WritePin>
        for(uint8_t line_pins = 0 ; line_pins < 4 ; line_pins++)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d9e7      	bls.n	8001282 <LCD_Send_4bit+0x18>
        }
    }
    else{ /* Do Nothing */ }
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LCD_Send_Enable_Signal>:

static void LCD_Send_Enable_Signal(const lcd_t *lcd)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
    if(NULL != lcd)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d012      	beq.n	80012ee <LCD_Send_Enable_Signal+0x34>
    {
        HAL_GPIO_WritePin(lcd->Lcd_Port, lcd->EN_Pin, GPIO_PIN_SET);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	88db      	ldrh	r3, [r3, #6]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	f001 fcb0 	bl	8002c38 <HAL_GPIO_WritePin>
        Delay_US(5);
 80012d8:	2005      	movs	r0, #5
 80012da:	f7ff fecb 	bl	8001074 <Delay_US>
        HAL_GPIO_WritePin(lcd->Lcd_Port, lcd->EN_Pin, GPIO_PIN_RESET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	88db      	ldrh	r3, [r3, #6]
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	f001 fca5 	bl	8002c38 <HAL_GPIO_WritePin>
    }
    else{ /* Do Nothing */ }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <LCD_Set_Cursor>:

static void LCD_Set_Cursor(const lcd_t *lcd, uint8_t row, uint8_t colomn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
    if(NULL != lcd && row <= NUMBER_OF_ROWS && colomn <= NUMBER_OF_COLOMNS)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d021      	beq.n	8001350 <LCD_Set_Cursor+0x5a>
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d81e      	bhi.n	8001350 <LCD_Set_Cursor+0x5a>
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d81b      	bhi.n	8001350 <LCD_Set_Cursor+0x5a>
    {
        colomn--;
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	3b01      	subs	r3, #1
 800131c:	70bb      	strb	r3, [r7, #2]
        switch(row)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <LCD_Set_Cursor+0x34>
 8001324:	2b02      	cmp	r3, #2
 8001326:	d008      	beq.n	800133a <LCD_Set_Cursor+0x44>
        {
            case ROW1: LCD_Send_Command(lcd, (0x80 + colomn));  break;
            case ROW2: LCD_Send_Command(lcd, (0xc0 + colomn));  break;
            default:                                            break;
 8001328:	e00f      	b.n	800134a <LCD_Set_Cursor+0x54>
            case ROW1: LCD_Send_Command(lcd, (0x80 + colomn));  break;
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	3b80      	subs	r3, #128	; 0x80
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fef0 	bl	8001118 <LCD_Send_Command>
 8001338:	e007      	b.n	800134a <LCD_Set_Cursor+0x54>
            case ROW2: LCD_Send_Command(lcd, (0xc0 + colomn));  break;
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	3b40      	subs	r3, #64	; 0x40
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fee8 	bl	8001118 <LCD_Send_Command>
 8001348:	bf00      	nop
        }
        Delay_US(50);
 800134a:	2032      	movs	r0, #50	; 0x32
 800134c:	f7ff fe92 	bl	8001074 <Delay_US>
    }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);

  ADC_Value = HAL_ADC_GetValue(&hadc1);							/* Get ADC Value */
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001362:	f000 ff71 	bl	8002248 <HAL_ADC_GetValue>
 8001366:	4603      	mov	r3, r0
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_ADC_ConvCpltCallback+0x74>)
 800136a:	6013      	str	r3, [r2, #0]
  Flame_Percentage = 100 - (ADC_Value * 100.0/4095);			/* Map ADV value from 0 to 100 */
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_ADC_ConvCpltCallback+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f873 	bl	800045c <__aeabi_ui2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x78>)
 800137c:	f7ff f8e8 	bl	8000550 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a30d      	add	r3, pc, #52	; (adr r3, 80013c0 <HAL_ADC_ConvCpltCallback+0x68>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff fa09 	bl	80007a4 <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f04f 0000 	mov.w	r0, #0
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x78>)
 800139c:	f7fe ff20 	bl	80001e0 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fae4 	bl	8000974 <__aeabi_d2uiz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x7c>)
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40affe00 	.word	0x40affe00
 80013c8:	20000034 	.word	0x20000034
 80013cc:	200000cc 	.word	0x200000cc
 80013d0:	40590000 	.word	0x40590000
 80013d4:	200000d0 	.word	0x200000d0

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fc8c 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f82a 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f000 f908 	bl	80015f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013e8:	f000 f890 	bl	800150c <MX_ADC1_Init>
  MX_TIM10_Init();
 80013ec:	f000 f8e0 	bl	80015b0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10);
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <main+0x4c>)
 80013f2:	f002 f8c9 	bl	8003588 <HAL_TIM_Base_Start>
  DHT22_Get_Reading(&Temperature, &Humidity);
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <main+0x50>)
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <main+0x54>)
 80013fa:	f7ff fd3d 	bl	8000e78 <DHT22_Get_Reading>
  lCD_Init(&lcd);
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <main+0x58>)
 8001400:	f7ff fe52 	bl	80010a8 <lCD_Init>

  System_Login();
 8001404:	f000 f95e 	bl	80016c4 <System_Login>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT22_Get_Reading(&Temperature, &Humidity);
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <main+0x50>)
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <main+0x54>)
 800140c:	f7ff fd34 	bl	8000e78 <DHT22_Get_Reading>
	  HAL_ADC_Start_IT(&hadc1);
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <main+0x5c>)
 8001412:	f000 fd4b 	bl	8001eac <HAL_ADC_Start_IT>
	  Print_Data();
 8001416:	f000 fa41 	bl	800189c <Print_Data>
	  HAL_Delay(2500);
 800141a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800141e:	f000 fcdd 	bl	8001ddc <HAL_Delay>
	  DHT22_Get_Reading(&Temperature, &Humidity);
 8001422:	e7f1      	b.n	8001408 <main+0x30>
 8001424:	2000007c 	.word	0x2000007c
 8001428:	200000d8 	.word	0x200000d8
 800142c:	200000d4 	.word	0x200000d4
 8001430:	0800389c 	.word	0x0800389c
 8001434:	20000034 	.word	0x20000034

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	; 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f002 f984 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <SystemClock_Config+0xcc>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <SystemClock_Config+0xcc>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <SystemClock_Config+0xd0>)
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <SystemClock_Config+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a0:	2310      	movs	r3, #16
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ac:	2308      	movs	r3, #8
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80014b0:	2354      	movs	r3, #84	; 0x54
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fbed 	bl	8002ca0 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014cc:	f000 fb08 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2102      	movs	r1, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fe4f 	bl	8003190 <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014f8:	f000 faf2 	bl	8001ae0 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	; 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <MX_ADC1_Init+0x9c>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001526:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800152a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_ADC1_Init+0x98>)
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <MX_ADC1_Init+0xa0>)
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_ADC1_Init+0x98>)
 800155a:	2201      	movs	r2, #1
 800155c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_ADC1_Init+0x98>)
 8001568:	2201      	movs	r2, #1
 800156a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_ADC1_Init+0x98>)
 800156e:	f000 fc59 	bl	8001e24 <HAL_ADC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001578:	f000 fab2 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800157c:	2308      	movs	r3, #8
 800157e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001580:	2301      	movs	r3, #1
 8001582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_ADC1_Init+0x98>)
 800158e:	f000 fe7d 	bl	800228c <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001598:	f000 faa2 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000034 	.word	0x20000034
 80015a8:	40012000 	.word	0x40012000
 80015ac:	0f000001 	.word	0x0f000001

080015b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <MX_TIM10_Init+0x44>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015bc:	2253      	movs	r2, #83	; 0x53
 80015be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM10_Init+0x40>)
 80015dc:	f001 ff84 	bl	80034e8 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80015e6:	f000 fa7b 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000007c 	.word	0x2000007c
 80015f4:	40014400 	.word	0x40014400

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <MX_GPIO_Init+0xc0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <MX_GPIO_Init+0xc0>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_GPIO_Init+0xc0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_GPIO_Init+0xc0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <MX_GPIO_Init+0xc0>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_GPIO_Init+0xc0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001646:	2200      	movs	r2, #0
 8001648:	f641 013f 	movw	r1, #6207	; 0x183f
 800164c:	481b      	ldr	r0, [pc, #108]	; (80016bc <MX_GPIO_Init+0xc4>)
 800164e:	f001 faf3 	bl	8002c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2178      	movs	r1, #120	; 0x78
 8001656:	481a      	ldr	r0, [pc, #104]	; (80016c0 <MX_GPIO_Init+0xc8>)
 8001658:	f001 faee 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800165c:	f641 033f 	movw	r3, #6207	; 0x183f
 8001660:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <MX_GPIO_Init+0xc4>)
 8001676:	f001 f943 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <MX_GPIO_Init+0xc8>)
 8001692:	f001 f935 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001696:	f44f 7360 	mov.w	r3, #896	; 0x380
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_GPIO_Init+0xc8>)
 80016ac:	f001 f928 	bl	8002900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400

080016c4 <System_Login>:

/* USER CODE BEGIN 4 */
/*********************   Login to the system     ********************/
void System_Login()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	/* While Number of Wrong less than 2 */
	while(num_of_trys < 2)
 80016ca:	e0bb      	b.n	8001844 <System_Login+0x180>
	{
		LCD_Send_String_Pos(&lcd, 1, 1, "Enter Password: ");
 80016cc:	4b62      	ldr	r3, [pc, #392]	; (8001858 <System_Login+0x194>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	2101      	movs	r1, #1
 80016d2:	4862      	ldr	r0, [pc, #392]	; (800185c <System_Login+0x198>)
 80016d4:	f7ff fdac 	bl	8001230 <LCD_Send_String_Pos>
		/* Reading the 4 Characters password */
		while(counter < 4)
 80016d8:	e02f      	b.n	800173a <System_Login+0x76>
		{
			while(!keypad_value)
				keypad_value = keypad_Read_Value(&keypad);
 80016da:	4861      	ldr	r0, [pc, #388]	; (8001860 <System_Login+0x19c>)
 80016dc:	f7ff fc56 	bl	8000f8c <keypad_Read_Value>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <System_Login+0x1a0>)
 80016e6:	701a      	strb	r2, [r3, #0]
			while(!keypad_value)
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <System_Login+0x1a0>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f4      	beq.n	80016da <System_Login+0x16>

			LCD_Send_Char_Pos(&lcd, 2, 13+counter, keypad_value);
 80016f0:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <System_Login+0x1a4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	330d      	adds	r3, #13
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <System_Login+0x1a0>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2102      	movs	r1, #2
 80016fe:	4857      	ldr	r0, [pc, #348]	; (800185c <System_Login+0x198>)
 8001700:	f7ff fd5b 	bl	80011ba <LCD_Send_Char_Pos>
			HAL_Delay(400);
 8001704:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001708:	f000 fb68 	bl	8001ddc <HAL_Delay>
			LCD_Send_Char_Pos(&lcd, 2, 13+counter, '*');
 800170c:	4b56      	ldr	r3, [pc, #344]	; (8001868 <System_Login+0x1a4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	330d      	adds	r3, #13
 8001712:	b2da      	uxtb	r2, r3
 8001714:	232a      	movs	r3, #42	; 0x2a
 8001716:	2102      	movs	r1, #2
 8001718:	4850      	ldr	r0, [pc, #320]	; (800185c <System_Login+0x198>)
 800171a:	f7ff fd4e 	bl	80011ba <LCD_Send_Char_Pos>

			entered_password[counter++] = keypad_value;
 800171e:	4b52      	ldr	r3, [pc, #328]	; (8001868 <System_Login+0x1a4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	b2d1      	uxtb	r1, r2
 8001726:	4a50      	ldr	r2, [pc, #320]	; (8001868 <System_Login+0x1a4>)
 8001728:	7011      	strb	r1, [r2, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <System_Login+0x1a0>)
 800172e:	7819      	ldrb	r1, [r3, #0]
 8001730:	4b4e      	ldr	r3, [pc, #312]	; (800186c <System_Login+0x1a8>)
 8001732:	5499      	strb	r1, [r3, r2]
			keypad_value = 0;
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <System_Login+0x1a0>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
		while(counter < 4)
 800173a:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <System_Login+0x1a4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d9d2      	bls.n	80016e8 <System_Login+0x24>
		}
		/* Check if Entered password is Correct */
		if(entered_password[0] == my_password[0] && entered_password[1] == my_password[1] &&
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <System_Login+0x1a8>)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <System_Login+0x1ac>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d12e      	bne.n	80017ac <System_Login+0xe8>
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <System_Login+0x1a8>)
 8001750:	785a      	ldrb	r2, [r3, #1]
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <System_Login+0x1ac>)
 8001754:	785b      	ldrb	r3, [r3, #1]
 8001756:	429a      	cmp	r2, r3
 8001758:	d128      	bne.n	80017ac <System_Login+0xe8>
		   entered_password[2] == my_password[2] && entered_password[3] == my_password[3])
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <System_Login+0x1a8>)
 800175c:	789a      	ldrb	r2, [r3, #2]
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <System_Login+0x1ac>)
 8001760:	789b      	ldrb	r3, [r3, #2]
		if(entered_password[0] == my_password[0] && entered_password[1] == my_password[1] &&
 8001762:	429a      	cmp	r2, r3
 8001764:	d122      	bne.n	80017ac <System_Login+0xe8>
		   entered_password[2] == my_password[2] && entered_password[3] == my_password[3])
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <System_Login+0x1a8>)
 8001768:	78da      	ldrb	r2, [r3, #3]
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <System_Login+0x1ac>)
 800176c:	78db      	ldrb	r3, [r3, #3]
 800176e:	429a      	cmp	r2, r3
 8001770:	d11c      	bne.n	80017ac <System_Login+0xe8>
		{
			// Correct password
			LCD_Send_String_Pos(&lcd, 1, 1, "Correct Password.");
 8001772:	4b40      	ldr	r3, [pc, #256]	; (8001874 <System_Login+0x1b0>)
 8001774:	2201      	movs	r2, #1
 8001776:	2101      	movs	r1, #1
 8001778:	4838      	ldr	r0, [pc, #224]	; (800185c <System_Login+0x198>)
 800177a:	f7ff fd59 	bl	8001230 <LCD_Send_String_Pos>
			LCD_Send_String_Pos(&lcd, 2, 13, "    ");
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <System_Login+0x1b4>)
 8001780:	220d      	movs	r2, #13
 8001782:	2102      	movs	r1, #2
 8001784:	4835      	ldr	r0, [pc, #212]	; (800185c <System_Login+0x198>)
 8001786:	f7ff fd53 	bl	8001230 <LCD_Send_String_Pos>
			HAL_Delay(1500);
 800178a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800178e:	f000 fb25 	bl	8001ddc <HAL_Delay>
			LCD_Send_String_Pos(&lcd, 1, 1, "T:  . C,H:   . %");
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <System_Login+0x1b8>)
 8001794:	2201      	movs	r2, #1
 8001796:	2101      	movs	r1, #1
 8001798:	4830      	ldr	r0, [pc, #192]	; (800185c <System_Login+0x198>)
 800179a:	f7ff fd49 	bl	8001230 <LCD_Send_String_Pos>
			LCD_Send_String_Pos(&lcd, 2, 1, "Flame:   %");
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <System_Login+0x1bc>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	482d      	ldr	r0, [pc, #180]	; (800185c <System_Login+0x198>)
 80017a6:	f7ff fd43 	bl	8001230 <LCD_Send_String_Pos>
			break;   // break out of the loop
 80017aa:	e051      	b.n	8001850 <System_Login+0x18c>
		}
		else
		{
			// Wrong Password
			num_of_trys++;
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <System_Login+0x1c0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <System_Login+0x1c0>)
 80017b6:	701a      	strb	r2, [r3, #0]
			LCD_Send_String_Pos(&lcd, 1, 1, "Wrong Password! ");
 80017b8:	4b33      	ldr	r3, [pc, #204]	; (8001888 <System_Login+0x1c4>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	2101      	movs	r1, #1
 80017be:	4827      	ldr	r0, [pc, #156]	; (800185c <System_Login+0x198>)
 80017c0:	f7ff fd36 	bl	8001230 <LCD_Send_String_Pos>
			LCD_Send_String_Pos(&lcd, 2, 13, "    ");
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <System_Login+0x1b4>)
 80017c6:	220d      	movs	r2, #13
 80017c8:	2102      	movs	r1, #2
 80017ca:	4824      	ldr	r0, [pc, #144]	; (800185c <System_Login+0x198>)
 80017cc:	f7ff fd30 	bl	8001230 <LCD_Send_String_Pos>
			HAL_Delay(1500);
 80017d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017d4:	f000 fb02 	bl	8001ddc <HAL_Delay>

			if(num_of_trys < 2)
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <System_Login+0x1c0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d80a      	bhi.n	80017f6 <System_Login+0x132>
			{
				// One Try left
				LCD_Send_String_Pos(&lcd, 1, 1, "Try again       ");
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <System_Login+0x1c8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	2101      	movs	r1, #1
 80017e6:	481d      	ldr	r0, [pc, #116]	; (800185c <System_Login+0x198>)
 80017e8:	f7ff fd22 	bl	8001230 <LCD_Send_String_Pos>
				HAL_Delay(1500);
 80017ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017f0:	f000 faf4 	bl	8001ddc <HAL_Delay>
 80017f4:	e023      	b.n	800183e <System_Login+0x17a>
			}
			else
			{
				// No Try left
				LCD_Send_String_Pos(&lcd, 1, 1, "Ran out of trys ");
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <System_Login+0x1cc>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	2101      	movs	r1, #1
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <System_Login+0x198>)
 80017fe:	f7ff fd17 	bl	8001230 <LCD_Send_String_Pos>
				for(uint8_t i = 0 ; i < 16 ; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e00a      	b.n	800181e <System_Login+0x15a>
				{
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180c:	4821      	ldr	r0, [pc, #132]	; (8001894 <System_Login+0x1d0>)
 800180e:	f001 fa2c 	bl	8002c6a <HAL_GPIO_TogglePin>
				    HAL_Delay(200);
 8001812:	20c8      	movs	r0, #200	; 0xc8
 8001814:	f000 fae2 	bl	8001ddc <HAL_Delay>
				for(uint8_t i = 0 ; i < 16 ; i++)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	3301      	adds	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d9f1      	bls.n	8001808 <System_Login+0x144>
				}

				LCD_Send_String_Pos(&lcd, 1, 1, "Try after 10 Sec");
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <System_Login+0x1d4>)
 8001826:	2201      	movs	r2, #1
 8001828:	2101      	movs	r1, #1
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <System_Login+0x198>)
 800182c:	f7ff fd00 	bl	8001230 <LCD_Send_String_Pos>
				HAL_Delay(10000);
 8001830:	f242 7010 	movw	r0, #10000	; 0x2710
 8001834:	f000 fad2 	bl	8001ddc <HAL_Delay>
				num_of_trys = 0;    // Reset Number of Trys
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <System_Login+0x1c0>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
			}
		}
		counter = 0;				// Reset Character Counter for a new Reading
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <System_Login+0x1a4>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
	while(num_of_trys < 2)
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <System_Login+0x1c0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	f67f af3f 	bls.w	80016cc <System_Login+0x8>
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	080037c4 	.word	0x080037c4
 800185c:	0800389c 	.word	0x0800389c
 8001860:	08003864 	.word	0x08003864
 8001864:	200000ca 	.word	0x200000ca
 8001868:	200000c8 	.word	0x200000c8
 800186c:	200000c4 	.word	0x200000c4
 8001870:	20000000 	.word	0x20000000
 8001874:	080037d8 	.word	0x080037d8
 8001878:	080037ec 	.word	0x080037ec
 800187c:	080037f4 	.word	0x080037f4
 8001880:	08003808 	.word	0x08003808
 8001884:	200000c9 	.word	0x200000c9
 8001888:	08003814 	.word	0x08003814
 800188c:	08003828 	.word	0x08003828
 8001890:	0800383c 	.word	0x0800383c
 8001894:	40020000 	.word	0x40020000
 8001898:	08003850 	.word	0x08003850

0800189c <Print_Data>:

/*******************   Displaying Readings on LCD     *******************/
void Print_Data()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	if(Temperature < 0){
 80018a0:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <Print_Data+0x22c>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d506      	bpl.n	80018be <Print_Data+0x22>
		LCD_Send_Char_Pos(&lcd, 1, 2, '-');    // Negative Temperature
 80018b0:	232d      	movs	r3, #45	; 0x2d
 80018b2:	2202      	movs	r2, #2
 80018b4:	2101      	movs	r1, #1
 80018b6:	4885      	ldr	r0, [pc, #532]	; (8001acc <Print_Data+0x230>)
 80018b8:	f7ff fc7f 	bl	80011ba <LCD_Send_Char_Pos>
 80018bc:	e005      	b.n	80018ca <Print_Data+0x2e>
	}
	else{
		LCD_Send_Char_Pos(&lcd, 1, 2, ':');	   // Positive Temperature
 80018be:	233a      	movs	r3, #58	; 0x3a
 80018c0:	2202      	movs	r2, #2
 80018c2:	2101      	movs	r1, #1
 80018c4:	4881      	ldr	r0, [pc, #516]	; (8001acc <Print_Data+0x230>)
 80018c6:	f7ff fc78 	bl	80011ba <LCD_Send_Char_Pos>
	}
	// Display Temperature Reading
	LCD_Send_Char_Pos(&lcd, 1, 3, (((uint32_t)Temperature / 10) % 10) + '0');
 80018ca:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <Print_Data+0x22c>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d4:	ee17 2a90 	vmov	r2, s15
 80018d8:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <Print_Data+0x234>)
 80018da:	fba3 2302 	umull	r2, r3, r3, r2
 80018de:	08d9      	lsrs	r1, r3, #3
 80018e0:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <Print_Data+0x234>)
 80018e2:	fba3 2301 	umull	r2, r3, r3, r1
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	1aca      	subs	r2, r1, r3
 80018f2:	b2d3      	uxtb	r3, r2
 80018f4:	3330      	adds	r3, #48	; 0x30
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2203      	movs	r2, #3
 80018fa:	2101      	movs	r1, #1
 80018fc:	4873      	ldr	r0, [pc, #460]	; (8001acc <Print_Data+0x230>)
 80018fe:	f7ff fc5c 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 1, 4, ((uint32_t)Temperature % 10) + '0');
 8001902:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <Print_Data+0x22c>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190c:	ee17 1a90 	vmov	r1, s15
 8001910:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <Print_Data+0x234>)
 8001912:	fba3 2301 	umull	r2, r3, r3, r1
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	1aca      	subs	r2, r1, r3
 8001922:	b2d3      	uxtb	r3, r2
 8001924:	3330      	adds	r3, #48	; 0x30
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2204      	movs	r2, #4
 800192a:	2101      	movs	r1, #1
 800192c:	4867      	ldr	r0, [pc, #412]	; (8001acc <Print_Data+0x230>)
 800192e:	f7ff fc44 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 1, 6, ((uint32_t)(Temperature * 10) % 10) + '0');
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <Print_Data+0x22c>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800193c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001944:	ee17 1a90 	vmov	r1, s15
 8001948:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <Print_Data+0x234>)
 800194a:	fba3 2301 	umull	r2, r3, r3, r1
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	1aca      	subs	r2, r1, r3
 800195a:	b2d3      	uxtb	r3, r2
 800195c:	3330      	adds	r3, #48	; 0x30
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2206      	movs	r2, #6
 8001962:	2101      	movs	r1, #1
 8001964:	4859      	ldr	r0, [pc, #356]	; (8001acc <Print_Data+0x230>)
 8001966:	f7ff fc28 	bl	80011ba <LCD_Send_Char_Pos>
	// Display Humidity Reading
	LCD_Send_Char_Pos(&lcd, 1, 11, (((uint32_t)Humidity / 100) % 10) + '0');
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <Print_Data+0x238>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001974:	ee17 2a90 	vmov	r2, s15
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <Print_Data+0x23c>)
 800197a:	fba3 2302 	umull	r2, r3, r3, r2
 800197e:	0959      	lsrs	r1, r3, #5
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <Print_Data+0x234>)
 8001982:	fba3 2301 	umull	r2, r3, r3, r1
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	1aca      	subs	r2, r1, r3
 8001992:	b2d3      	uxtb	r3, r2
 8001994:	3330      	adds	r3, #48	; 0x30
 8001996:	b2db      	uxtb	r3, r3
 8001998:	220b      	movs	r2, #11
 800199a:	2101      	movs	r1, #1
 800199c:	484b      	ldr	r0, [pc, #300]	; (8001acc <Print_Data+0x230>)
 800199e:	f7ff fc0c 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 1, 12, (((uint32_t)Humidity / 10) % 10) + '0');
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <Print_Data+0x238>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <Print_Data+0x234>)
 80019b2:	fba3 2302 	umull	r2, r3, r3, r2
 80019b6:	08d9      	lsrs	r1, r3, #3
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <Print_Data+0x234>)
 80019ba:	fba3 2301 	umull	r2, r3, r3, r1
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	1aca      	subs	r2, r1, r3
 80019ca:	b2d3      	uxtb	r3, r2
 80019cc:	3330      	adds	r3, #48	; 0x30
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	220c      	movs	r2, #12
 80019d2:	2101      	movs	r1, #1
 80019d4:	483d      	ldr	r0, [pc, #244]	; (8001acc <Print_Data+0x230>)
 80019d6:	f7ff fbf0 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 1, 13, ((uint32_t)Humidity % 10) + '0');
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <Print_Data+0x238>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e4:	ee17 1a90 	vmov	r1, s15
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <Print_Data+0x234>)
 80019ea:	fba3 2301 	umull	r2, r3, r3, r1
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1aca      	subs	r2, r1, r3
 80019fa:	b2d3      	uxtb	r3, r2
 80019fc:	3330      	adds	r3, #48	; 0x30
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	220d      	movs	r2, #13
 8001a02:	2101      	movs	r1, #1
 8001a04:	4831      	ldr	r0, [pc, #196]	; (8001acc <Print_Data+0x230>)
 8001a06:	f7ff fbd8 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 1, 15, ((uint32_t)(Humidity * 10) % 10) + '0');
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <Print_Data+0x238>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1c:	ee17 1a90 	vmov	r1, s15
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <Print_Data+0x234>)
 8001a22:	fba3 2301 	umull	r2, r3, r3, r1
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	1aca      	subs	r2, r1, r3
 8001a32:	b2d3      	uxtb	r3, r2
 8001a34:	3330      	adds	r3, #48	; 0x30
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	220f      	movs	r2, #15
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4823      	ldr	r0, [pc, #140]	; (8001acc <Print_Data+0x230>)
 8001a3e:	f7ff fbbc 	bl	80011ba <LCD_Send_Char_Pos>
	// Display Flame Percentage
	LCD_Send_Char_Pos(&lcd, 2, 7, ((Flame_Percentage / 100) % 10) + '0');
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <Print_Data+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <Print_Data+0x23c>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	0959      	lsrs	r1, r3, #5
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <Print_Data+0x234>)
 8001a50:	fba3 2301 	umull	r2, r3, r3, r1
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	1aca      	subs	r2, r1, r3
 8001a60:	b2d3      	uxtb	r3, r2
 8001a62:	3330      	adds	r3, #48	; 0x30
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2207      	movs	r2, #7
 8001a68:	2102      	movs	r1, #2
 8001a6a:	4818      	ldr	r0, [pc, #96]	; (8001acc <Print_Data+0x230>)
 8001a6c:	f7ff fba5 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 2, 8, ((Flame_Percentage / 10) % 10) + '0');
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <Print_Data+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <Print_Data+0x234>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	08d9      	lsrs	r1, r3, #3
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <Print_Data+0x234>)
 8001a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	1aca      	subs	r2, r1, r3
 8001a8e:	b2d3      	uxtb	r3, r2
 8001a90:	3330      	adds	r3, #48	; 0x30
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2208      	movs	r2, #8
 8001a96:	2102      	movs	r1, #2
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <Print_Data+0x230>)
 8001a9a:	f7ff fb8e 	bl	80011ba <LCD_Send_Char_Pos>
	LCD_Send_Char_Pos(&lcd, 2, 9, (Flame_Percentage % 10) + '0');
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <Print_Data+0x240>)
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <Print_Data+0x234>)
 8001aa4:	fba3 2301 	umull	r2, r3, r3, r1
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	1aca      	subs	r2, r1, r3
 8001ab4:	b2d3      	uxtb	r3, r2
 8001ab6:	3330      	adds	r3, #48	; 0x30
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2209      	movs	r2, #9
 8001abc:	2102      	movs	r1, #2
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <Print_Data+0x230>)
 8001ac0:	f7ff fb7b 	bl	80011ba <LCD_Send_Char_Pos>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000d4 	.word	0x200000d4
 8001acc:	0800389c 	.word	0x0800389c
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	200000d8 	.word	0x200000d8
 8001ad8:	51eb851f 	.word	0x51eb851f
 8001adc:	200000d0 	.word	0x200000d0

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_ADC_MspInit+0x8c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12f      	bne.n	8001bbe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_ADC_MspInit+0x90>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <HAL_ADC_MspInit+0x94>)
 8001baa:	f000 fea9 	bl	8002900 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2012      	movs	r0, #18
 8001bb4:	f000 fe6d 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bb8:	2012      	movs	r0, #18
 8001bba:	f000 fe86 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_TIM_Base_MspInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_TIM_Base_MspInit+0x40>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40014400 	.word	0x40014400
 8001c14:	40023800 	.word	0x40023800

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f89a 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <ADC_IRQHandler+0x10>)
 8001c72:	f000 f9d9 	bl	8002028 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000034 	.word	0x20000034

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca8:	f7ff ffea 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f001 fd47 	bl	8003764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7ff fb7f 	bl	80013d8 <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ce8:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 8001cec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cf0:	200000e0 	.word	0x200000e0

08001cf4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <DMA1_Stream0_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 fdab 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fede 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fdc3 	bl	80028e6 <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 fd8b 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004
 8001d94:	2000000c 	.word	0x2000000c
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	200000dc 	.word	0x200000dc

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200000dc 	.word	0x200000dc

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e033      	b.n	8001ea2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fe7a 	bl	8001b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e6a:	f023 0302 	bic.w	r3, r3, #2
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fb2a 	bl	80024d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	e001      	b.n	8001e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Start_IT+0x1a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0a1      	b.n	800200a <HAL_ADC_Start_IT+0x15e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d018      	beq.n	8001f0e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_ADC_Start_IT+0x16c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a4a      	ldr	r2, [pc, #296]	; (800201c <HAL_ADC_Start_IT+0x170>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0c9a      	lsrs	r2, r3, #18
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d169      	bne.n	8001ff0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5a:	d106      	bne.n	8001f6a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f023 0206 	bic.w	r2, r3, #6
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_ADC_Start_IT+0x174>)
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f84:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f94:	f043 0320 	orr.w	r3, r3, #32
 8001f98:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d129      	bne.n	8002008 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	e020      	b.n	8002008 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_ADC_Start_IT+0x178>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d11b      	bne.n	8002008 <HAL_ADC_Start_IT+0x15c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d114      	bne.n	8002008 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e00b      	b.n	8002008 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000004 	.word	0x20000004
 800201c:	431bde83 	.word	0x431bde83
 8002020:	40012300 	.word	0x40012300
 8002024:	40012000 	.word	0x40012000

08002028 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d049      	beq.n	80020f2 <HAL_ADC_IRQHandler+0xca>
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d046      	beq.n	80020f2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d12b      	bne.n	80020e2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d127      	bne.n	80020e2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d119      	bne.n	80020e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0220 	bic.w	r2, r2, #32
 80020bc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f938 	bl	8001358 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0212 	mvn.w	r2, #18
 80020f0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d057      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x190>
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d054      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d139      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12b      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d124      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11d      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d119      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002182:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fa8d 	bl	80026c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f06f 020c 	mvn.w	r2, #12
 80021b6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_ADC_IRQHandler+0x1d6>
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d014      	beq.n	80021fe <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10d      	bne.n	80021fe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f837 	bl	8002262 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0201 	mvn.w	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_ADC_IRQHandler+0x218>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f043 0202 	orr.w	r2, r3, #2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0220 	mvn.w	r2, #32
 800222e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f820 	bl	8002276 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0220 	mvn.w	r2, #32
 800223e:	601a      	str	r2, [r3, #0]
  }
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1c>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e105      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x228>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d925      	bls.n	8002304 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	3b1e      	subs	r3, #30
 80022ce:	2207      	movs	r2, #7
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	4603      	mov	r3, r0
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4403      	add	r3, r0
 80022f6:	3b1e      	subs	r3, #30
 80022f8:	409a      	lsls	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	e022      	b.n	800234a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6919      	ldr	r1, [r3, #16]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	2207      	movs	r2, #7
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6919      	ldr	r1, [r3, #16]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	4603      	mov	r3, r0
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4403      	add	r3, r0
 8002340:	409a      	lsls	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b06      	cmp	r3, #6
 8002350:	d824      	bhi.n	800239c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b05      	subs	r3, #5
 8002364:	221f      	movs	r2, #31
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	400a      	ands	r2, r1
 8002372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b05      	subs	r3, #5
 800238e:	fa00 f203 	lsl.w	r2, r0, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
 800239a:	e04c      	b.n	8002436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b0c      	cmp	r3, #12
 80023a2:	d824      	bhi.n	80023ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b23      	subs	r3, #35	; 0x23
 80023b6:	221f      	movs	r2, #31
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43da      	mvns	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	400a      	ands	r2, r1
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	3b23      	subs	r3, #35	; 0x23
 80023e0:	fa00 f203 	lsl.w	r2, r0, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
 80023ec:	e023      	b.n	8002436 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b41      	subs	r3, #65	; 0x41
 8002400:	221f      	movs	r2, #31
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	400a      	ands	r2, r1
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	3b41      	subs	r3, #65	; 0x41
 800242a:	fa00 f203 	lsl.w	r2, r0, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_ADC_ConfigChannel+0x234>)
 8002438:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_ADC_ConfigChannel+0x238>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d109      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1cc>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b12      	cmp	r3, #18
 800244a:	d105      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_ADC_ConfigChannel+0x238>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d123      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x21e>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b10      	cmp	r3, #16
 8002468:	d003      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x1e6>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b11      	cmp	r3, #17
 8002470:	d11b      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d111      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_ADC_ConfigChannel+0x240>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	0c9a      	lsrs	r2, r3, #18
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40012300 	.word	0x40012300
 80024c4:	40012000 	.word	0x40012000
 80024c8:	20000004 	.word	0x20000004
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d8:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <ADC_Init+0x1f0>)
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	021a      	lsls	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6899      	ldr	r1, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <ADC_Init+0x1f4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e00f      	b.n	80025ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0202 	bic.w	r2, r2, #2
 80025dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7e1b      	ldrb	r3, [r3, #24]
 80025e8:	005a      	lsls	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800261a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	3b01      	subs	r3, #1
 8002628:	035a      	lsls	r2, r3, #13
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e007      	b.n	8002644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002642:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	3b01      	subs	r3, #1
 8002660:	051a      	lsls	r2, r3, #20
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002686:	025a      	lsls	r2, r3, #9
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	029a      	lsls	r2, r3, #10
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40012300 	.word	0x40012300
 80026c4:	0f000001 	.word	0x0f000001

080026c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff29 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff3e 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff31 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e159      	b.n	8002bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8148 	bne.w	8002bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a2 	beq.w	8002bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_GPIO_Init+0x2f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x202>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_GPIO_Init+0x2f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x1fe>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_GPIO_Init+0x2f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x1fa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x1f6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x1f2>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4935      	ldr	r1, [pc, #212]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f aea2 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	e001      	b.n	8002c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	041a      	lsls	r2, r3, #16
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e267      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d075      	beq.n	8002daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d112      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d157      	bne.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e242      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x74>
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb0>
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff f834 	bl	8001dc4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff f830 	bl	8001dc4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e207      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff f820 	bl	8001dc4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff f81c 	bl	8001dc4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1f3      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c7      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe ffd5 	bl	8001dc4 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe ffd1 	bl	8001dc4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a8      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x244>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe ffb4 	bl	8001dc4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe ffb0 	bl	8001dc4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e187      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe ff94 	bl	8001dc4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe ff90 	bl	8001dc4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e167      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x200>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x248>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe ff7d 	bl	8001dc4 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fe ff79 	bl	8001dc4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e150      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7a      	ldr	r3, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b74      	ldr	r3, [pc, #464]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe ff39 	bl	8001dc4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe ff35 	bl	8001dc4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e10c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x474>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2ea>
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a63      	ldr	r2, [pc, #396]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x30c>
 8002f92:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x324>
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b55      	ldr	r3, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fefa 	bl	8001dc4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fef6 	bl	8001dc4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0cb      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fee4 	bl	8001dc4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fee0 	bl	8001dc4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0b5      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a38      	ldr	r2, [pc, #224]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a1 	beq.w	8003180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d05c      	beq.n	8003104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d141      	bne.n	80030d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe feb4 	bl	8001dc4 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe feb0 	bl	8001dc4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e087      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fe89 	bl	8001dc4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fe85 	bl	8001dc4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e05c      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x416>
 80030d4:	e054      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fe72 	bl	8001dc4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fe6e 	bl	8001dc4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e038      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
 8003118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4ec>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d028      	beq.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d121      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0cc      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d90c      	bls.n	80031cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b8      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d044      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d119      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d003      	beq.n	800324e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e067      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4934      	ldr	r1, [pc, #208]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003280:	f7fe fda0 	bl	8001dc4 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe fd9c 	bl	8001dc4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e04f      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d20c      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e032      	b.n	800333e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4916      	ldr	r1, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490a      	ldr	r1, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fd00 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023c00 	.word	0x40023c00
 800334c:	40023800 	.word	0x40023800
 8003350:	080038ac 	.word	0x080038ac
 8003354:	20000004 	.word	0x20000004
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b090      	sub	sp, #64	; 0x40
 8003362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
 8003368:	2300      	movs	r3, #0
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d00d      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x40>
 8003380:	2b08      	cmp	r3, #8
 8003382:	f200 80a1 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 800338a:	2b04      	cmp	r3, #4
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x3a>
 800338e:	e09b      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003394:	e09b      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339a:	e098      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	627a      	str	r2, [r7, #36]	; 0x24
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c4:	2100      	movs	r1, #0
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c8:	fb03 f201 	mul.w	r2, r3, r1
 80033cc:	2300      	movs	r3, #0
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d6:	fba0 1202 	umull	r1, r2, r0, r2
 80033da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033dc:	460a      	mov	r2, r1
 80033de:	62ba      	str	r2, [r7, #40]	; 0x28
 80033e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e2:	4413      	add	r3, r2
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e8:	2200      	movs	r2, #0
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	61fa      	str	r2, [r7, #28]
 80033ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033f6:	f7fd fadd 	bl	80009b4 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4613      	mov	r3, r2
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	e053      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	2200      	movs	r2, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	617a      	str	r2, [r7, #20]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003416:	f04f 0b00 	mov.w	fp, #0
 800341a:	4652      	mov	r2, sl
 800341c:	465b      	mov	r3, fp
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	ebb2 080a 	subs.w	r8, r2, sl
 8003436:	eb63 090b 	sbc.w	r9, r3, fp
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003446:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800344a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800344e:	ebb2 0408 	subs.w	r4, r2, r8
 8003452:	eb63 0509 	sbc.w	r5, r3, r9
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	00eb      	lsls	r3, r5, #3
 8003460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003464:	00e2      	lsls	r2, r4, #3
 8003466:	4614      	mov	r4, r2
 8003468:	461d      	mov	r5, r3
 800346a:	eb14 030a 	adds.w	r3, r4, sl
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	eb45 030b 	adc.w	r3, r5, fp
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003482:	4629      	mov	r1, r5
 8003484:	028b      	lsls	r3, r1, #10
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800348c:	4621      	mov	r1, r4
 800348e:	028a      	lsls	r2, r1, #10
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	2200      	movs	r2, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	60fa      	str	r2, [r7, #12]
 800349c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a0:	f7fd fa88 	bl	80009b4 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_GetSysClockFreq+0x180>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3740      	adds	r7, #64	; 0x40
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	017d7840 	.word	0x017d7840

080034e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e041      	b.n	800357e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe fb60 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f000 f888 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e03c      	b.n	800361a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <HAL_TIM_Base_Start+0xa0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d018      	beq.n	80035e4 <HAL_TIM_Base_Start+0x5c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d013      	beq.n	80035e4 <HAL_TIM_Base_Start+0x5c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1a      	ldr	r2, [pc, #104]	; (800362c <HAL_TIM_Base_Start+0xa4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00e      	beq.n	80035e4 <HAL_TIM_Base_Start+0x5c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a19      	ldr	r2, [pc, #100]	; (8003630 <HAL_TIM_Base_Start+0xa8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_TIM_Base_Start+0x5c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <HAL_TIM_Base_Start+0xac>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_TIM_Base_Start+0x5c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <HAL_TIM_Base_Start+0xb0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d111      	bne.n	8003608 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d010      	beq.n	8003618 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003606:	e007      	b.n	8003618 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40014000 	.word	0x40014000

0800363c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <TIM_Base_SetConfig+0xfc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00f      	beq.n	8003674 <TIM_Base_SetConfig+0x38>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0x38>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a37      	ldr	r2, [pc, #220]	; (800373c <TIM_Base_SetConfig+0x100>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0x38>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a36      	ldr	r2, [pc, #216]	; (8003740 <TIM_Base_SetConfig+0x104>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x38>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a35      	ldr	r2, [pc, #212]	; (8003744 <TIM_Base_SetConfig+0x108>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <TIM_Base_SetConfig+0xfc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01b      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d017      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <TIM_Base_SetConfig+0x100>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <TIM_Base_SetConfig+0x104>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00f      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a26      	ldr	r2, [pc, #152]	; (8003744 <TIM_Base_SetConfig+0x108>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00b      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <TIM_Base_SetConfig+0x10c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <TIM_Base_SetConfig+0x110>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <TIM_Base_SetConfig+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <TIM_Base_SetConfig+0xfc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]
  }
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <memset>:
 8003754:	4402      	add	r2, r0
 8003756:	4603      	mov	r3, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4d0d      	ldr	r5, [pc, #52]	; (800379c <__libc_init_array+0x38>)
 8003768:	4c0d      	ldr	r4, [pc, #52]	; (80037a0 <__libc_init_array+0x3c>)
 800376a:	1b64      	subs	r4, r4, r5
 800376c:	10a4      	asrs	r4, r4, #2
 800376e:	2600      	movs	r6, #0
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	4d0b      	ldr	r5, [pc, #44]	; (80037a4 <__libc_init_array+0x40>)
 8003776:	4c0c      	ldr	r4, [pc, #48]	; (80037a8 <__libc_init_array+0x44>)
 8003778:	f000 f818 	bl	80037ac <_init>
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	2600      	movs	r6, #0
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	f855 3b04 	ldr.w	r3, [r5], #4
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	f855 3b04 	ldr.w	r3, [r5], #4
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	080038c4 	.word	0x080038c4
 80037a0:	080038c4 	.word	0x080038c4
 80037a4:	080038c4 	.word	0x080038c4
 80037a8:	080038c8 	.word	0x080038c8

080037ac <_init>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr

080037b8 <_fini>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr
